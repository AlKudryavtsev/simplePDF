{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as cheerio from 'cheerio';\nimport axios from 'axios';\nimport sharp from 'sharp';\nimport puppeteer from 'puppeteer';\n\nexport type PageMargin = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n\nasync function prepareImages(content: string) {\n  const parse = cheerio.load(content);\n\n  const imgTags = parse('img');\n  await Promise.all(\n    imgTags.map(async (index, element) => {\n      const imgElement = parse(element);\n      const imgUrl = imgElement.attr('src');\n\n      if (imgUrl) {\n        try {\n          // Скачиваем изображение\n          const response = await axios.get(imgUrl, {\n            responseType: 'arraybuffer',\n          });\n\n          // Изменяем размер изображения с помощью sharp\n          const resizedImageBuffer = await sharp(response.data)\n            .resize({ width: 600, height: 600, fit: 'inside' }) // Можно также задать ширину или другие параметры\n            .jpeg({ quality: 70 })\n            .toBuffer();\n\n          // Конвертируем изображение в base64\n\n          // @ts-ignore\n          const base64Image = `data:image/${sharp(response.data).metadata().format};base64,${resizedImageBuffer.toString('base64')}`;\n\n          // Заменяем src в теге <img> на base64 строку\n          imgElement.attr('src', base64Image);\n        } catch (error) {\n          console.error(`Error processing image ${imgUrl}: ${error}`);\n        }\n      }\n    }),\n  );\n\n  return parse.html();\n}\n\nexport async function bufferPdfFromHtml(\n  html: string,\n  margin: PageMargin = { top: 30, right: 10, bottom: 30, left: 10 },\n  landscape = false,\n  format: 'a4' | 'a5' = 'a4',\n  parseImage = false,\n) {\n  const browser = await puppeteer.launch({\n    args: [\n      '--no-sandbox',\n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage',\n      '--disable-web-security',\n      '--disable-features=IsolateOrigins,site-per-process',\n      '--shm-size=10gb', // this solves the issue\n    ],\n  });\n\n  if (parseImage) html = await prepareImages(html);\n\n  const page = await browser.newPage();\n  page.setDefaultNavigationTimeout(0);\n  await page.setContent(html, { waitUntil: 'domcontentloaded' });\n  await page.emulateMediaType('screen');\n\n  const data = await page.pdf({\n    margin,\n    landscape,\n    printBackground: true,\n    format,\n    timeout: 0,\n  });\n\n  await browser.close();\n\n  return Buffer.from(data);\n}\n\nexport async function bufferLandscapePdfFromHtml(\n  html: string,\n  margin: PageMargin = { top: 30, right: 10, bottom: 30, left: 10 },\n  format: 'a4' | 'a5' = 'a4',\n  parseImage = false,\n) {\n  return bufferPdfFromHtml(html, margin, true, format, parseImage);\n}\n\nexport async function renderPdfFromHtml(\n  html: string,\n  src: string,\n  margin: PageMargin = { top: 30, right: 10, bottom: 30, left: 10 },\n  landscape = false,\n  format: 'a4' | 'a5' = 'a4',\n  parseImage = false,\n) {\n  const browser = await puppeteer.launch({\n    args: [\n      '--no-sandbox',\n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage',\n      '--disable-web-security',\n      '--disable-features=IsolateOrigins,site-per-process',\n      '--shm-size=10gb', // this solves the issue\n    ],\n  });\n\n  if (parseImage) html = await prepareImages(html);\n\n  const page = await browser.newPage();\n  page.setDefaultNavigationTimeout(0);\n  await page.setContent(html, { waitUntil: 'domcontentloaded' });\n  await page.emulateMediaType('screen');\n\n  await page.pdf({\n    path: src,\n    margin,\n    landscape,\n    printBackground: true,\n    format,\n    timeout: 0,\n  });\n\n  await browser.close();\n}\n\nexport async function renderLandscapePdfFromHtml(\n  html: string,\n  src: string,\n  margin: PageMargin = { top: 30, right: 10, bottom: 30, left: 10 },\n  format: 'a4' | 'a5' = 'a4',\n  parseImage = false,\n) {\n  return renderPdfFromHtml(html, src, margin, true, format, parseImage);\n}\n\nexport async function renderUrlToPdf(\n  url: string,\n  src: string,\n  margin: PageMargin = { top: 30, right: 10, bottom: 30, left: 10 },\n  landscape = false,\n  format: 'a4' | 'a5' = 'a4',\n) {\n  const browser = await puppeteer.launch({\n    args: [\n      '--no-sandbox',\n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage',\n      '--disable-web-security',\n      '--disable-features=IsolateOrigins,site-per-process',\n      '--shm-size=10gb', // this solves the issue\n    ],\n  });\n\n  const page = await browser.newPage();\n  page.setDefaultNavigationTimeout(0);\n  await page.goto(url);\n  await page.emulateMediaType('screen');\n\n  await page.pdf({\n    path: src,\n    margin,\n    landscape,\n    printBackground: true,\n    format,\n    timeout: 0,\n  });\n\n  await browser.close();\n}\n"],"mappings":"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","names":["axios","sharp","puppeteer"]}